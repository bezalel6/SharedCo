package ver1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class SyncModel {
    static final int ROWS =8;
    static final int COLS= 8;
    static Piece[] pieces = new Piece[32];
    static JButton[][] btnMat;
    static String player;
    public SyncModel() {
        initGame();
    }
    public static void initGame()
    {
        player = "White";
    }
    public static void createGui()
    {
        JFrame win = new JFrame();
        JPanel top = new JPanel();
        JPanel middle = new JPanel();
        JPanel bottom = new JPanel();

        win.setSize(1000,1000);
        win.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        win.setLocationRelativeTo(null);

        btnMat = new JButton[ROWS][COLS];
        middle.setLayout(new GridLayout(ROWS,COLS));
        int index= 32;
        for (int i = 0; i <ROWS ; i++) {
            isBlack=!isBlack;
            for (int j = 0; j < COLS; j++) {
                Location loc = new Location(i,j);

                if(i<2||i>5) {

                    index--;


                    btnMat[i][j] =new JButton();

                    pieces[index] = createPiece(loc,btnMat[i][j]);
                    btnMat[i][j].setIcon(pieces[index].getImage());
                }
                else {
                    btnMat[i][j] = new JButton();
                    btnMat[i][j].setIcon(null);
                }

                btnMat[i][j].addActionListener(new ActionListener()
                {
                    @Override
                    public void actionPerformed(ActionEvent e)
                    {
                        clicked((JButton)e.getSource());
                    }
                });

                btnMat[i][j].setFocusable(false);
                middle.add(btnMat[i][j]);
            }
        }
        disableAllEmptyCells();
        resetBackground();
        win.add(middle);
        win.setVisible(true);
    }
    static boolean isBlack = false;
    static void resetBackground()
    {
        for (int i = 0,row=0; row<ROWS;row++,i++) {
            isBlack=!isBlack;
            for (int j = 0, cell = 0; cell < COLS; cell++, j++) {
                if (isBlack) btnMat[i][j].setBackground(Color.GRAY);
                else btnMat[i][j].setBackground(Color.white);
                isBlack = !isBlack;
            }
        }
    }
    static Piece createPiece(Location loc,JButton btn)
    {
        String color="White",type="Pawn";
        int row = loc.getRow(), col = loc.getCol();
        if(row==1||row==6)
        {
            type = "Pawn";
            if(row==6) {
                color= "White";
            }
            else{
                color= "Black";
            }
        }
        else if(row==0||row==7)
        {
            type="Rook";
            if(col==0||col==7)
            {
                if(row==0) color="Black";
                else color = "White";
            }
            else if(col == 1||col==6)
            {
                type = "Knight";
                if(row==0) color="Black";
                else color = "White";
            }
            else if(col==2||col==5)
            {
                type="Bishop";
                if(row==0)color="Black";
                else color="White";
            }
            else if(col==3)
            {
                type="King";
                if(row==0)color="Black";
                else color="White";
            }
            else if(col==4)
            {
                type="Queen";
                if(row==0)color="Black";
                else color="White";
            }
        }

        return new Piece(color,type,loc,btn);
    }
    static Location getBtnMatLocation(JButton btn)
    {
        Location loc = new Location();
        for (int i = 0,row=0; row<ROWS;row++,i++)
            for (int j = 0,cell=0; cell<COLS;cell++,j++)
                if(btn==btnMat[row][cell]) {
                    return new Location(row,cell);
                }
        return loc;
    }
    static boolean isFirstClick=true;
    static JButton prevButton;
    static Location prevLocation;
    static void clicked(JButton btn)
    {
        Location loc = getBtnMatLocation(btn);
        Piece piece = getPiece(btn);
        if(isFirstClick) {
            prevLocation = loc;
            prevButton = btn;
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++) {
                    Location moveTo = new Location(i, j);
                    if (!canMove(piece, moveTo)) {
                        enableCell(moveTo,false);
                    }
                    else {
                        enableCell(moveTo,true);
                        btnMat[i][j].setBackground(Color.YELLOW);
                    }
                }
            }
        }
        else
        {
            btnMat[loc.getRow()][loc.getCol()]=btn;

            Piece piece1 = getPiece(prevButton);
            resetBackground();
            btnMat[loc.getRow()][loc.getCol()].setIcon(piece1.getImage());
            btnMat[prevLocation.getRow()][prevLocation.getCol()].setIcon(null);
            disableAllEmptyCells();
        }
        isFirstClick=!isFirstClick;
    }
    static Piece getPiece(JButton btn)
    {
        int i=0;
        for (i = 0; i < pieces.length; i++) {

            if(pieces[i].getBtn()==btn)
            {
                return pieces[i];
            }
        }
        return null;
    }
    static boolean canMove(Piece piece, Location loc)
    {
        String type = piece.getType();

        switch(type)
        {
            case "Pawn":
                if(canPawnMove(piece,loc))
                    return true;break;
            case "Rook":
                if(canRookMove(piece,loc))
                    return true;break;
        }
        return false;
    }
    static boolean canPawnMove(Piece piece,Location destination)
    {
        int multiplyByMinus = 1,firstRow = 1;
        if(piece.getColor()=="White")
        {
            multiplyByMinus=-1;
            firstRow = 6;
        }
        if(destination.getCol()==piece.getLoc().getCol()) {
            if (destination.getRow() == piece.getLoc().getRow() + 1 * multiplyByMinus)
                return true;

            if (piece.getLoc().getRow() == firstRow && destination.getRow() == piece.getLoc().getRow() + 2 * multiplyByMinus)
                return true;
        }

        return false;
    }
    static boolean canRookMove(Piece piece,Location destination)
    {
       if(destination.getCol()==piece.getLoc().getCol()||destination.getRow()==piece.getLoc().getRow())
           return true;
        return false;
    }
    static void disableAllEmptyCells()
    {
        for (int i = 0; i <ROWS ; i++) {
            for (int j = 0; j <COLS ; j++) {
                if(btnMat[i][j].getIcon()==null)enableCell(new Location(i,j),false);
                else enableCell(new Location(i,j),true);
            }
        }
    }
    static void enableCell(Location loc,boolean bool)
    {
        btnMat[loc.getRow()][loc.getCol()].setEnabled(bool);
    }
    static void enableAllCells(boolean bool)
    {
        for (int i = 0; i <ROWS ; i++) {
            for (int j = 0; j < COLS; j++) {
                btnMat[i][j].setEnabled(bool);
            }
        }
    }
    public static void colorWinLocs(ArrayList<Location> winLocList)
    {
        for(int i= 0; i < winLocList.size(); i++)
        {
            Location loc = winLocList.get(i);
            btnMat[loc.getRow()][loc.getCol()].setBackground(Color.YELLOW);
        }
    }
}
